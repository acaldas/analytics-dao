/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  SimpleCoin,
  SimpleCoinInterface,
} from "../../contracts/SimpleCoin";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokensToBeMinted",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "SimpleCoin__NotEnoughBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getBalanceInEth",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMintedTokenBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sendCoin",
    outputs: [
      {
        internalType: "bool",
        name: "sufficient",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161060b38038061060b833981810160405281019061003291906100bd565b806000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600181905550506100ea565b600080fd5b6000819050919050565b61009a81610087565b81146100a557600080fd5b50565b6000815190506100b781610091565b92915050565b6000602082840312156100d3576100d2610082565b5b60006100e1848285016100a8565b91505092915050565b610512806100f96000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806337a151b8146100515780637bd703e81461006f57806390b98a111461009f578063f8b2cb4f146100cf575b600080fd5b6100596100ff565b60405161006691906102b6565b60405180910390f35b61008960048036038101906100849190610334565b610109565b60405161009691906102b6565b60405180910390f35b6100b960048036038101906100b4919061038d565b610127565b6040516100c691906103e8565b60405180910390f35b6100e960048036038101906100e49190610334565b610255565b6040516100f691906102b6565b60405180910390f35b6000600154905090565b6000600261011683610255565b6101209190610432565b9050919050565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156101a1576040517f86e25f3100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546101ef9190610474565b92505081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461024491906104a8565b925050819055506001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000819050919050565b6102b08161029d565b82525050565b60006020820190506102cb60008301846102a7565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610301826102d6565b9050919050565b610311816102f6565b811461031c57600080fd5b50565b60008135905061032e81610308565b92915050565b60006020828403121561034a576103496102d1565b5b60006103588482850161031f565b91505092915050565b61036a8161029d565b811461037557600080fd5b50565b60008135905061038781610361565b92915050565b600080604083850312156103a4576103a36102d1565b5b60006103b28582860161031f565b92505060206103c385828601610378565b9150509250929050565b60008115159050919050565b6103e2816103cd565b82525050565b60006020820190506103fd60008301846103d9565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061043d8261029d565b91506104488361029d565b92508282026104568161029d565b9150828204841483151761046d5761046c610403565b5b5092915050565b600061047f8261029d565b915061048a8361029d565b92508282039050818111156104a2576104a1610403565b5b92915050565b60006104b38261029d565b91506104be8361029d565b92508282019050808211156104d6576104d5610403565b5b9291505056fea26469706673582212208c50c81d5b95df620ae66840302665e49beb0210bc8507b1bf4d6e0f35dee6c364736f6c63430008110033";

type SimpleCoinConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleCoinConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleCoin__factory extends ContractFactory {
  constructor(...args: SimpleCoinConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    tokensToBeMinted: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SimpleCoin> {
    return super.deploy(
      tokensToBeMinted,
      overrides || {}
    ) as Promise<SimpleCoin>;
  }
  override getDeployTransaction(
    tokensToBeMinted: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(tokensToBeMinted, overrides || {});
  }
  override attach(address: string): SimpleCoin {
    return super.attach(address) as SimpleCoin;
  }
  override connect(signer: Signer): SimpleCoin__factory {
    return super.connect(signer) as SimpleCoin__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleCoinInterface {
    return new utils.Interface(_abi) as SimpleCoinInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleCoin {
    return new Contract(address, _abi, signerOrProvider) as SimpleCoin;
  }
}
