/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  UserFileAccess,
  UserFileAccessInterface,
} from "../../contracts/UserFileAccess";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "AddUserFileAccess",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_tokenIds",
        type: "uint256[]",
      },
    ],
    name: "addMultipleUserFileAccess",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "addUserFileAccess",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_host",
        type: "bytes",
      },
    ],
    name: "getHostPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_tokenIds",
        type: "uint256[]",
      },
    ],
    name: "getMultipleUserFilePrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "getUserFilePrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "hasUserFileAccess",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_host",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
    ],
    name: "setHostEventPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "_hosts",
        type: "bytes[]",
      },
      {
        internalType: "uint256[]",
        name: "_counts",
        type: "uint256[]",
      },
    ],
    name: "setUserFileEventCount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405267016345785d8a000060015534801561001c57600080fd5b5061003961002e61003e60201b60201c565b61004660201b60201c565b61010a565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611c18806101196000396000f3fe60806040526004361061009c5760003560e01c8063715018a611610064578063715018a6146101aa5780637427a7f6146101c15780638da5cb5b146101ff57806398615b791461022a578063f2fde38b14610246578063fed69ed31461026f5761009c565b80631ad44921146100a1578063240c6967146100de5780634fe85025146101075780635b036f311461014457806365e5c8961461016d575b600080fd5b3480156100ad57600080fd5b506100c860048036038101906100c39190610cc2565b61028b565b6040516100d59190610cfe565b60405180910390f35b3480156100ea57600080fd5b5061010560048036038101906101009190610dd4565b6103ad565b005b34801561011357600080fd5b5061012e60048036038101906101299190610faa565b6104e3565b60405161013b9190610cfe565b60405180910390f35b34801561015057600080fd5b5061016b60048036038101906101669190610ff3565b610524565b005b34801561017957600080fd5b50610194600480360381019061018f9190610cc2565b610553565b6040516101a1919061106a565b60405180910390f35b3480156101b657600080fd5b506101bf6105ba565b005b3480156101cd57600080fd5b506101e860048036038101906101e39190611085565b6105ce565b6040516101f6929190611190565b60405180910390f35b34801561020b57600080fd5b50610214610720565b6040516102219190611201565b60405180910390f35b610244600480360381019061023f9190611085565b610749565b005b34801561025257600080fd5b5061026d60048036038101906102689190611248565b6108db565b005b61028960048036038101906102849190610cc2565b61095e565b005b60008060009050600060026000858152602001908152602001600020905060005b81805490508110156103a25760008282815481106102cd576102cc611275565b5b906000526020600020906002020190506103728160000180546102ef906112d3565b80601f016020809104026020016040519081016040528092919081815260200182805461031b906112d3565b80156103685780601f1061033d57610100808354040283529160200191610368565b820191906000526020600020905b81548152906001019060200180831161034b57829003601f168201915b50505050506104e3565b81600101546103819190611333565b8461038c9190611375565b935050808061039a906113a9565b9150506102ac565b508192505050919050565b6103b5610b2a565b8181905084849050146103c757600080fd5b60005b848490508110156104db5760026000878152602001908152602001600020604051806040016040528087878581811061040657610405611275565b5b90506020028101906104189190611400565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200185858581811061047357610472611275565b5b90506020020135815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000190816104bb919061161a565b5060208201518160010155505080806104d3906113a9565b9150506103ca565b505050505050565b6000806003836040516104f69190611752565b90815260200160405180910390205490506000810361051a5760015491505061051f565b809150505b919050565b61052c610b2a565b8060038360405161053d9190611752565b9081526020016040518091039020819055505050565b60006004600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6105c2610b2a565b6105cc6000610ba8565b565b600060606000808585905067ffffffffffffffff8111156105f2576105f1610e7f565b5b6040519080825280602002602001820160405280156106205781602001602082028036833780820191505090505b50905060005b8686905081101561071057600087878381811061064657610645611275565b5b90506020020135905060003073ffffffffffffffffffffffffffffffffffffffff16631ad44921836040518263ffffffff1660e01b815260040161068a9190610cfe565b602060405180830381865afa1580156106a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cb919061177e565b905080856106d99190611375565b9450808484815181106106ef576106ee611275565b5b60200260200101818152505050508080610708906113a9565b915050610626565b5081819350935050509250929050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000803073ffffffffffffffffffffffffffffffffffffffff16637427a7f685856040518363ffffffff1660e01b8152600401610787929190611815565b600060405180830381865afa1580156107a4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107cd91906118fc565b9150915081341015610814576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080b906119b5565b60405180910390fd5b60005b848490508110156108d4573073ffffffffffffffffffffffffffffffffffffffff1663fed69ed383838151811061085157610850611275565b5b602002602001015187878581811061086c5761086b611275565b5b905060200201356040518363ffffffff1660e01b815260040161088f9190610cfe565b6000604051808303818588803b1580156108a857600080fd5b505af11580156108bc573d6000803e3d6000fd5b505050505080806108cc906113a9565b915050610817565b5050505050565b6108e3610b2a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610952576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094990611a47565b60405180910390fd5b61095b81610ba8565b50565b60006002600083815260200190815260200160002080549050116109b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ae90611ab3565b60405180910390fd5b60003073ffffffffffffffffffffffffffffffffffffffff16631ad44921836040518263ffffffff1660e01b81526004016109f29190610cfe565b602060405180830381865afa158015610a0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a33919061177e565b905080341015610a78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6f90611b1f565b60405180910390fd5b60016004600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fc07d3b5090161100e18fad39e717305844f0baa28b5ef048073ca5e53be40f1d823383604051610b1493929190611b3f565b60405180910390a1610b268282610c6c565b5050565b610b32610c70565b73ffffffffffffffffffffffffffffffffffffffff16610b50610720565b73ffffffffffffffffffffffffffffffffffffffff1614610ba6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9d90611bc2565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5050565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610c9f81610c8c565b8114610caa57600080fd5b50565b600081359050610cbc81610c96565b92915050565b600060208284031215610cd857610cd7610c82565b5b6000610ce684828501610cad565b91505092915050565b610cf881610c8c565b82525050565b6000602082019050610d136000830184610cef565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610d3e57610d3d610d19565b5b8235905067ffffffffffffffff811115610d5b57610d5a610d1e565b5b602083019150836020820283011115610d7757610d76610d23565b5b9250929050565b60008083601f840112610d9457610d93610d19565b5b8235905067ffffffffffffffff811115610db157610db0610d1e565b5b602083019150836020820283011115610dcd57610dcc610d23565b5b9250929050565b600080600080600060608688031215610df057610def610c82565b5b6000610dfe88828901610cad565b955050602086013567ffffffffffffffff811115610e1f57610e1e610c87565b5b610e2b88828901610d28565b9450945050604086013567ffffffffffffffff811115610e4e57610e4d610c87565b5b610e5a88828901610d7e565b92509250509295509295909350565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610eb782610e6e565b810181811067ffffffffffffffff82111715610ed657610ed5610e7f565b5b80604052505050565b6000610ee9610c78565b9050610ef58282610eae565b919050565b600067ffffffffffffffff821115610f1557610f14610e7f565b5b610f1e82610e6e565b9050602081019050919050565b82818337600083830152505050565b6000610f4d610f4884610efa565b610edf565b905082815260208101848484011115610f6957610f68610e69565b5b610f74848285610f2b565b509392505050565b600082601f830112610f9157610f90610d19565b5b8135610fa1848260208601610f3a565b91505092915050565b600060208284031215610fc057610fbf610c82565b5b600082013567ffffffffffffffff811115610fde57610fdd610c87565b5b610fea84828501610f7c565b91505092915050565b6000806040838503121561100a57611009610c82565b5b600083013567ffffffffffffffff81111561102857611027610c87565b5b61103485828601610f7c565b925050602061104585828601610cad565b9150509250929050565b60008115159050919050565b6110648161104f565b82525050565b600060208201905061107f600083018461105b565b92915050565b6000806020838503121561109c5761109b610c82565b5b600083013567ffffffffffffffff8111156110ba576110b9610c87565b5b6110c685828601610d7e565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61110781610c8c565b82525050565b600061111983836110fe565b60208301905092915050565b6000602082019050919050565b600061113d826110d2565b61114781856110dd565b9350611152836110ee565b8060005b8381101561118357815161116a888261110d565b975061117583611125565b925050600181019050611156565b5085935050505092915050565b60006040820190506111a56000830185610cef565b81810360208301526111b78184611132565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111eb826111c0565b9050919050565b6111fb816111e0565b82525050565b600060208201905061121660008301846111f2565b92915050565b611225816111e0565b811461123057600080fd5b50565b6000813590506112428161121c565b92915050565b60006020828403121561125e5761125d610c82565b5b600061126c84828501611233565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806112eb57607f821691505b6020821081036112fe576112fd6112a4565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061133e82610c8c565b915061134983610c8c565b925082820261135781610c8c565b9150828204841483151761136e5761136d611304565b5b5092915050565b600061138082610c8c565b915061138b83610c8c565b92508282019050808211156113a3576113a2611304565b5b92915050565b60006113b482610c8c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036113e6576113e5611304565b5b600182019050919050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261141d5761141c6113f1565b5b80840192508235915067ffffffffffffffff82111561143f5761143e6113f6565b5b60208301925060018202360383131561145b5761145a6113fb565b5b509250929050565b600081519050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026114d07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611493565b6114da8683611493565b95508019841693508086168417925050509392505050565b6000819050919050565b600061151761151261150d84610c8c565b6114f2565b610c8c565b9050919050565b6000819050919050565b611531836114fc565b61154561153d8261151e565b8484546114a0565b825550505050565b600090565b61155a61154d565b611565818484611528565b505050565b5b818110156115895761157e600082611552565b60018101905061156b565b5050565b601f8211156115ce5761159f8161146e565b6115a884611483565b810160208510156115b7578190505b6115cb6115c385611483565b83018261156a565b50505b505050565b600082821c905092915050565b60006115f1600019846008026115d3565b1980831691505092915050565b600061160a83836115e0565b9150826002028217905092915050565b61162382611463565b67ffffffffffffffff81111561163c5761163b610e7f565b5b61164682546112d3565b61165182828561158d565b600060209050601f8311600181146116845760008415611672578287015190505b61167c85826115fe565b8655506116e4565b601f1984166116928661146e565b60005b828110156116ba57848901518255600182019150602085019450602081019050611695565b868310156116d757848901516116d3601f8916826115e0565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b60005b838110156117155780820151818401526020810190506116fa565b60008484015250505050565b600061172c82611463565b61173681856116ec565b93506117468185602086016116f7565b80840191505092915050565b600061175e8284611721565b915081905092915050565b60008151905061177881610c96565b92915050565b60006020828403121561179457611793610c82565b5b60006117a284828501611769565b91505092915050565b600080fd5b82818337505050565b60006117c583856110dd565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156117f8576117f76117ab565b5b6020830292506118098385846117b0565b82840190509392505050565b600060208201905081810360008301526118308184866117b9565b90509392505050565b600067ffffffffffffffff82111561185457611853610e7f565b5b602082029050602081019050919050565b600061187861187384611839565b610edf565b9050808382526020820190506020840283018581111561189b5761189a610d23565b5b835b818110156118c457806118b08882611769565b84526020840193505060208101905061189d565b5050509392505050565b600082601f8301126118e3576118e2610d19565b5b81516118f3848260208601611865565b91505092915050565b6000806040838503121561191357611912610c82565b5b600061192185828601611769565b925050602083015167ffffffffffffffff81111561194257611941610c87565b5b61194e858286016118ce565b9150509250929050565b600082825260208201905092915050565b7f4e6f7420656e6f7567682066756e647320666f7220616c6c2066696c65730000600082015250565b600061199f601e83611958565b91506119aa82611969565b602082019050919050565b600060208201905081810360008301526119ce81611992565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611a31602683611958565b9150611a3c826119d5565b604082019050919050565b60006020820190508181036000830152611a6081611a24565b9050919050565b7f46696c65206576656e747320636f756e74206e6f742073657400000000000000600082015250565b6000611a9d601983611958565b9150611aa882611a67565b602082019050919050565b60006020820190508181036000830152611acc81611a90565b9050919050565b7f4e6f7420656e6f7567682066756e647300000000000000000000000000000000600082015250565b6000611b09601083611958565b9150611b1482611ad3565b602082019050919050565b60006020820190508181036000830152611b3881611afc565b9050919050565b6000606082019050611b546000830186610cef565b611b6160208301856111f2565b611b6e6040830184610cef565b949350505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611bac602083611958565b9150611bb782611b76565b602082019050919050565b60006020820190508181036000830152611bdb81611b9f565b905091905056fea26469706673582212203ca0e466aa37734fea8706602f5c41af0d88e2186a70eeba66d0d271923f0b9b64736f6c63430008110033";

type UserFileAccessConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UserFileAccessConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UserFileAccess__factory extends ContractFactory {
  constructor(...args: UserFileAccessConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<UserFileAccess> {
    return super.deploy(overrides || {}) as Promise<UserFileAccess>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): UserFileAccess {
    return super.attach(address) as UserFileAccess;
  }
  override connect(signer: Signer): UserFileAccess__factory {
    return super.connect(signer) as UserFileAccess__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UserFileAccessInterface {
    return new utils.Interface(_abi) as UserFileAccessInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UserFileAccess {
    return new Contract(address, _abi, signerOrProvider) as UserFileAccess;
  }
}
